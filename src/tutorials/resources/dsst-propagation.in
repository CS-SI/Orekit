## Input file for DSSTPropagation

## The input file syntax is a set of key=value lines.
## Blank lines and lines starting with '#' (after whitespace trimming) are
## silently ignored.
## The equal sign may be surrounded by space characters.
## Keys must correspond to the ParameterKey enumerate constants, given that
## matching is not case sensitive and that '_' characters may appear as '.'
## characters in the file.

## This file must contain one orbit defined as keplerian, equinoctial, circular
## or cartesian.

## Some parameters are optional, default values are shown below between [].

## All dates are treated in UTC timescale.
## The inertial frame for orbit definition and propagation is EME2000.
## Physical data are read from the src/tutorial/resources/tutorial-orekit-data
## directory.

### Orbit definition
## date of the orbital parameters (UTC)
orbit.date = 2011-12-12T11:57:20.000

### Keplerian elements
## Semi-major axis (km)
orbit.keplerian.a = 7204.535848109436
## Eccentricity
orbit.keplerian.e = 0.0012402238462686
## Inclination (degrees)
orbit.keplerian.i = 98.74341600466740
## Right Ascension of Ascending Node (degrees)
orbit.keplerian.raan = 43.32990110790340
## Perigee Argument (degrees)
orbit.keplerian.pa = 111.1990175076630
## Anomaly (degrees)
orbit.keplerian.anomaly = 68.66852509725620

### Equinoctial elements
## Semi-major axis (km)
# orbit.equinoctial.a = 0.0
## ex/k component of eccentricity vector
# orbit.equinoctial.ex = 0.0
## ey/h component of eccentricity vector
# orbit.equinoctial.ey = 0.0
## hx/q component of inclination vector
# orbit.equinoctial.hx = 0.0
## hy/p component of inclination vector
# orbit.equinoctial.hy = 0.0
## Longitude Argument (degrees)
# orbit.equinoctial.lambda = 0.0

### Circular elements
## Semi-major axis (km)
# orbit.circular.a = 0.0
## ex component of eccentricity vector
# orbit.circular.ex = 0.0
## ey component of eccentricity vector
# orbit.circular.ey = 0.0
## Inclination (degrees)
# orbit.circular.i = 0.0
## Right Ascension of Ascending Node (degrees)
# orbit.circular.raan = 0.0
## Latitude Argument (degrees)
# orbit.circular.alpha = 0.0

### Angle type for anomaly, alpha or lambda (ECCENTRIC/MEAN/TRUE) [MEAN]
orbit.angle.type = MEAN

### Cartesian elements
## Position along X in inertial frame (km)
# orbit.cartesian.px = 0.0
## Position along Y in inertial frame (km)
# orbit.cartesian.py = 0.0
## Position along Z in inertial frame (km)
# orbit.cartesian.pz = 0.0
## Velocity along X in inertial frame (km/s)
# orbit.cartesian.vx = 0.0
## Velocity along Y in inertial frame (km/s)
# orbit.cartesian.vy = 0.0
## Velocity along Z in inertial frame (km/s)
# orbit.cartesian.vz = 0.0

### Do we consider initial orbital elements as osculating? (true/false) [false]
initial.orbit.is.osculating = false

### Do we output osculating orbital elements? (true/false) [inherited from initial.orbit.is.osculating by default]
output.orbit.is.osculating = false

### Force models

## Spacecraft mass (kg) [1000.]
# mass = 1000.

## Central body gravity potential degree
central.body.degree = 36
## Central body gravity potential order
central.body.order  =  0

## 3rd body Moon (true/false) [false]
third.body.moon = false
## 3rd body Sun (true/false) [false]
third.body.sun  = false

## Atmospheric drag (true/false) [false]
drag = false
## Drag coefficient
# drag.cd =  2.0
## Drag area (m^2)
# drag.sf = 10.0

## Solar Radiation Pressure (true/false) [false]
solar.radiation.pressure = false
## SRP coefficient
# solar.radiation.pressure.cr =  1.2
## SRP area (m^2)
# solar.radiation.pressure.sf = 25.0

### Simulation parameters
## Start date (UTC) [orbit.date]
# start.date  = 2011-12-12T11:57:20.000
## One duration must be set, whether in seconds or in days
## If both durations are set, duration.in.days will overwrite duration
## Duration (seconds)
# duration = 31536000.0
## Duration (days)
duration.in.days = 365.0
## Time step between printed elements (seconds)
output.step = 86400.0

### Output parameters
## Output Keplerian parameters in output file (true/false) [true]
output.Keplerian = true
## Output equinoctial parameters in output file (true/false) [true]
output.equinoctial = true
## Output Cartesian parameters in output file (true/false) [true]
output.Cartesian = true
## Short period coefficients to output (comma separated list of coefficients names, or "none", or "all") [none]
## in order to get the list of available coefficients names, one should perform a first
## run with a value set to all and then look at the output file header. Note that the
## (a), (h), (k), (p), (q) and (L) parts do not belong to the coefficient names, they
## describe the 6 columns that correspond to one coefficient.
## Beware that the list is huge ...
output.short.period.coefficients = none

## Fixed integration step size for propagation (seconds) [-1.]
## If fixed.integration.step > 0, the ClassicalRungeKutta integrator
## will be used with the given value for the step size, otherwise
## the adaptative step size integrator DormandPrince853 will be used
# fixed.integration.step = 43200.

## Do we want to compare the DSST with the numerical propagator ? [false]
numerical.comparison = false
