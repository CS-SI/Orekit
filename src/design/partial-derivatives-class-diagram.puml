' Copyright 2002-2021 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12
  skinparam linetype              ortho

  package org.orekit #ECEBD8 {

    package forces #DDEBD8 {

      interface ForceModel {
        +void addContribution()
        +FieldVector3D<Gradient> acceleration()
        +EventDetector[] getEventsDetectors()
      }

      package radiation #CBDBC8 {
        class SolarRadiationPressure
        ForceModel <|.. SolarRadiationPressure
      }

    }
 
    package propagation #DDEBD8 {

      interface Propagator {
        + SpacecraftState propagate(AbsoluteDate target)
      }

      interface MatrixHarvester {
        +RealMatrix getStateTransitionMatrix(SpacecraftState state)
        +RealMatrix getParametersJacobian(SpacecraftState state)
      }

      Propagator <|.. AbstractPropagator

      package integration #CBDBC8 {
        interface AdditionalDerivativesProvider {
          +String getName()
          +yield()
          +void derivatives()
        }
        class  AbstractIntegratedPropagator {
         +void addAdditionalDerivativesProvider(AdditionalDerivativesProvider provider)
        }
        AbstractPropagator <|-- AbstractIntegratedPropagator
        AdditionalDerivativesProvider <---o AbstractIntegratedPropagator : provider
      }

      package numerical #CBDBC8 {

        interface TimeDerivativesEquations {
          +void addKeplerContribution()
          +void addNonKeplerianAcceleration()
          +void addMassDerivative()
        }

       class NumericalPropagator {
         +void addForceModel(ForceModel model)
         +MatrixHarvester setupMatricesComputation(name, initialSTM, initialJacobian)
       }

       TimeDerivativesEquations    <--      ForceModel : contributes
       AbstractIntegratedPropagator  <|--     NumericalPropagator
       NumericalPropagator         "1..*" *--> ForceModel
       MatrixHarvester              <-- NumericalPropagator
       NumericalPropagator         "1" *--> TimeDerivativesEquations : main

      }
    }

  }

  package user.application #F3EDF7 {
        class ComplexForceModel #EAE6F7/B9B3D2
        ComplexForceModel ..|> ForceModel

  }
@enduml
