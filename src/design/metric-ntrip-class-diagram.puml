' Copyright 2002-2024 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.

@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11

  package java.lang #ECEBD8 {
    interface Runnable
  }

  package org.orekit.gnss.metric #ECEBD8 {

    package parser #DDEBD8 {

      class MessagesParser
      
      abstract class AbstractEncodedMessages {
        {abstract} #int fetchByte()
      }

    }

    package ntrip #DDEBD8 {
      
      interface MessageObserver {
        +messageAvailable(String mountPoint, ParsedMessage message)
      }
      
      class MyObserverForIgm01

      class StreamMonitor {
        +run()
      }
      
      class NtripClient {
        +NtripClient(String host, int port)
        +setProxy(Proxy.Type type, proxyHost, proxyPort)
        +addObserver(int typeCode, String mountPoint, MessageObserver observer)
        +SourceTable getSourceTable()
        +startStreaming(mountPoint, type, requiresNMEA, ignoreUnknownMessageTypes)
        +stropStreaming(time)
      }

      enum Type {
        +RTCM
        +IGS_SSR
        {static} +MessagesParser getParser(List<Integer> messages)
      }
      
      class SourceTable {
        +List<CasterRecord> getCasters()
        +List<NetworkRecord> getNetworks()
        +List<DataStreamRecord> getDataStreams()
      }

      Runnable <|..  StreamMonitor
      AbstractEncodedMessages <|--  StreamMonitor
      MessagesParser          <--   Type
      StreamMonitor           <--   NtripClient
      SourceTable             <--   NtripClient
      NtripClient          *--> "*" MessageObserver
      NtripClient          *-->"1"  Type
      MessageObserver         <|..  MyObserverForIgm01

    }

  }

@enduml
