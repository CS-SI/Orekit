' Copyright 2002-2024 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12
  skinparam linetype              ortho

  package org.hipparchus #ECEBD8 {
      interface RandomVectorGenerator
  }

  package org.orekit #ECEBD8 {

    package propagation #DDEBD8 {

      package events #CBDBC8 {
        interface EventsDetector
        note top
          ground visibility,
          ground at night,
          sunlit satellite,
          inter sat direct view,
          boolean combination...
        end note
      }

      interface Propagator
      class PropagatorsParallelizer {
        propagate()
      }
      Propagator <-- PropagatorsParallelizer

    }

    package time #DDEBD8 {
        interface DatesSelector {
          +selectDates(interval)
        }
        class FixedStepSelector
        class BurstSelector


        DatesSelector <|.. FixedStepSelector
        DatesSelector <|.. BurstSelector
    }

    package estimation.measurements #DDEBD8 {

      package generation #CBDBC8 {

        interface "MeasurementBuilder<T>" as MeasurementBuilder_T_ {
          +addModifier(estimationModifier)
          +T build(spacecraftStates)
        }

        class "...MeasurementBuilder" as XXXMeasurementBuilder
        note left
          one for each
          measurement type
        end note

        class Generator {
          +ObservableSatellite addPropagator(Propagator)
          +Propagator getPropagator(index)
          +addScheduler(scheduler)
          +addSubscriber(subscriber)
          +generate(startDate, endDate)
        }

        enum SignSemantic {
          +FEASIBLE_MEASUREMENT_WHEN_POSITIVE
          +FEASIBLE_MEASUREMENT_WHEN_NEGATIVE
        }
        class "EventBasedScheduler<T>" as EventBasedScheduler_T_
        class "ContinuousScheduler<T>" as ContinuousScheduler_T_

        interface "Scheduler<T>" as Scheduler_T_ {
          +MeasurementBuilder_T_ getBuilder()
          +SortedSet<T> generate(interpolators)
        }

        interface GeneratedMeasurementSubscriber {
          +init(start, end)
          +handleGeneratedMeasurement(measurement)
        }

        class GatheringSubscriber {
          +SortedSet<ObservedMeasurements> getGeneratedMeasurements()
        }

        XXXMeasurementBuilder       ..|>          MeasurementBuilder_T_
        MeasurementBuilder_T_ "1" <--* Scheduler_T_
        RandomVectorGenerator <-- XXXMeasurementBuilder
        SignSemantic "1" <--* EventBasedScheduler_T_
        Scheduler_T_ <|.left. EventBasedScheduler_T_
        Scheduler_T_ <|.. ContinuousScheduler_T_
        Scheduler_T_ "*" <--* Generator
        Generator *--> GeneratedMeasurementSubscriber
        GeneratedMeasurementSubscriber <|-- GatheringSubscriber
        EventsDetector <--* EventBasedScheduler_T_
  
        Generator --> PropagatorsParallelizer
        Propagator "*" <--* Generator

      }

      interface "EstimationModifier<T>" as EstimationModifier_T_
      interface "ObservedMeasurement<T>" as ObservedMeasurement_T_
      class "...Measurement" as XXXMeasurement
      note top
        this box represents any
        measurement type
        (range, range-rate, ...)
      end note

 
      EstimationModifier_T_  "*" <-left-*      ObservedMeasurement_T_ 
      ObservedMeasurement_T_     <|..          XXXMeasurement
      XXXMeasurement <-left- XXXMeasurementBuilder
      EstimationModifier_T_ "*" <--* XXXMeasurementBuilder 

      Scheduler_T_ *--> "1" DatesSelector
    }

  }

@enduml
