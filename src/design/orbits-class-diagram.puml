' Copyright 2002-2024 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.

@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12
  skinparam linetype              ortho

  package org.orekit #ECEBD8 {

    package time #DDEBD8 {
      interface TimeStamped
      interface "TimeShiftable<T>" as TimeShiftable_T_
      interface "TimeInterpolable<T>" as TimeInterpolable_T_
    }

    package orbit #DDEBD8 {
      class KeplerianOrbit
      class CircularOrbit
      class CartesianOrbit
      class EquinoctialOrbit

      enum OrbitType {
        +CARTESIAN
        +CIRCULAR
        +EQUINOCTIAL
        +KEPLERIAN
        +Orbit convertType(Orbit orbit)
        +void mapOrbitToArray(...)
        +Orbit mapArrayToOrbit(...)
      }

      enum PositionAngleType {
        +MEAN
        +ECCENTRIC
        +TRUE
      }

      abstract class Orbit {
        +OrbitType getType()
        +Frame getFrame()
        +double getA()
        +double getKeplerianPeriod()
        +double getKeplerianMeanMotion()
        +double get...()
        +void getJacobianWrtCartesian(PositionAngleType type, double[][] jacobian)
        +void getJacobianWrtParameters(PositionAngleType type, double[][] jacobian)
      }

      OrbitType     -->   Orbit : convert
      OrbitType     <--*  Orbit
      PositionAngleType <--   Orbit
      OrbitType     -->   PositionAngleType
      Orbit         <|--  KeplerianOrbit
      Orbit         <|--  CircularOrbit
      Orbit         <|--  CartesianOrbit
      Orbit         <|--  EquinoctialOrbit

    }

  }

  TimeStamped         <|.. Orbit
  TimeShiftable_T_    <|.. Orbit
  TimeInterpolable_T_ <|.. Orbit

@enduml
