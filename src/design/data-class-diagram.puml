' Copyright 2002-2017 CS Systèmes d'Information
' Licensed to CS Systèmes d'Information (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12

  package org.orekit #ECEBD8 {

    package data #DDEBD8 {

      interface DataProvider {
        +Pattern GZIP_FILE_PATTERN
        +Pattern ZIP_ARCHIVE_PATTERN
        +boolean feed(Pattern supported, DataLoader visitor)
      }
      note right
        knows how to retrieve data
        from storage, not parse it
      end note

      class DataProvidersManager {
        +String OREKIT_DATA_PATH
        +DataProvidersManager getInstance()
        +void addDefaultProviders()
        +void addProvider(DataProvider provider)
        +DataProvider removeProvider(Class<? extends DataProvider> providerClass)
        +DataProvider removeProvider(DataProvider provider)
        +void clearProviders()
        +boolean isSupported(Class<? extends DataProvider> providerClass)
        +boolean isSupported(DataProvider provider)
        +List<DataProvider> getProviders()
        +Set<String> getLoadedDataNames()
        +void clearLoadedDataNames()
        +boolean feed(String supportedNames, DataLoader loader)
      }
      note top
        manages configuration
      end note

      interface DataLoader {
        +boolean stillAcceptsData()
        +void loadData(InputStream input, String name)
      }
      note top
        knows how to parse data,
        not retrieve it from storage
      end note

      DataProvider "*" <--o "1" DataProvidersManager : manages, feeds
      DirectoryCrawler --|> DataProvider
      ClassPathCrawler --|> DataProvider
      NetworkCrawler   --|> DataProvider
      ZipJarCrawler    --|> DataProvider
      DataProvider --> DataLoader : feeds

    }

    package time #DDEBD8 {
      DataLoader <|-- UTCTAIHistoryFilesLoader
    }

    package frames #DDEBD8 {
      interface EOPHistoryLoader
      DataLoader <|.. EOPHistoryLoader
    }

    package various.other.packages #DDEBD8 {
      class "...DataLoader" as DummyDataLoader
      DataLoader <|-- DummyDataLoader
    }

  }

  package user.application #F3EDF7 {
    class MyProvider #EAE6F7/B9B3D2
    class DataBase   #EAE6F7/B9B3D2
    class Main       #EAE6F7/B9B3D2
    DataProvider <|-- MyProvider
    DataProvidersManager <-- Main : configures
    MyProvider <--* Main
    MyProvider *--> "1" DataBase
  }

@enduml
