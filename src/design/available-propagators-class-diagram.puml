' Copyright 2002-2024 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12
  skinparam linetype              ortho

  package org.orekit #ECEBD8 {

    package utils #DDEBD8 {
      interface PVCoordinatesProvider {
        +PVCoordinates getPVCoordinates(AbsoluteDate date, Frame frame)
      }
    }
 
    package propagation #DDEBD8 {
      interface Propagator {
        +StepHandlerMultiplexer getMultiplexer()
        +void clearStepHandlers()
        +void setStepHandler(double h, OrekitFixedStepHandler handler)
        +void setStepHandler(OrekitStepHandler handler)
        +SpacecraftState getInitialState()
        +void resetInitialState(SpacecraftState state)
        +void addEventDetector(EventDetector detector)
        +Collection<EventDetector> getEventsDetectors()
        +void clearEventsDetectors()
        +AttitudeProvider getAttitudeProvider()
        +void setAttitudeProvider(AttitudeProvider attitudeProvider)
        +MatricesHarvester setupMatricesComputation(String stmName, RealMatrix initialStm, DoubleArrayDictionary initialJacobianColumns)
        +Frame getFrame()
        +SpacecraftState propagate(AbsoluteDate target)
        +SpacecraftState propagate(AbsoluteDate start, AbsoluteDate target)
      }

      interface BoundedPropagator {
        +AbsoluteDate getMinDate()
        +AbsoluteDate getMaxDate()
      }

      abstract class AbstractPropagator {
      }

      PVCoordinatesProvider <|.. Propagator
      Propagator            <|.. AbstractPropagator
      Propagator            <|.. BoundedPropagator

      package analytical #CBDBC8 {

        abstract class AbstractAnalyticalPropagator {
          +PVCoordinatesProvider getPvProvider()
          +void addAdditionalStateProvider(AdditionalStateProvider additionalStateProvider)
        }

        AbstractPropagator           <|-- AbstractAnalyticalPropagator
        AbstractAnalyticalPropagator <|-- AdapterPropagator
        AbstractAnalyticalPropagator <|-- BrouwerLyddanePropagator
        AbstractAnalyticalPropagator <|-- EcksteinHechlerPropagator
        AbstractAnalyticalPropagator <|-- GLONASSAnalyticalPropagator
        AbstractAnalyticalPropagator <|-- KeplerianPropagator

        AbstractAnalyticalPropagator <|-- Ephemeris
        BoundedPropagator            <|.. Ephemeris

        package tle #CCCCC7 {
          AbstractAnalyticalPropagator <|-- TLEPropagator
        }

        package gnss #CCCCC7 {
          AbstractAnalyticalPropagator <|-- GNSSPropagator
        }

     }

     package integration #CBDBC8 {

       abstract class AbstractIntegratedPropagator {
         +void setIntegrator(FirstOrderIntegrator integrator)
         +void addAdditionalDerivativesProvider(AdditionalDerivativesProvider provider)
         +void setInitialAdditionalState(String name, double[] addState)
       }

       BoundedPropagator <|.. IntegratedEphemeris
       IntegratedEphemeris --|> AbstractAnalyticalPropagator
       AbstractIntegratedPropagator o--> IntegratedEphemeris : creates
       AbstractPropagator  <|-- AbstractIntegratedPropagator

     }

     package semianalytical #CBDBC8 {

       package dsst #CCCCC7 {
         DSSTPropagator --|> AbstractIntegratedPropagator
       }

     }

     package numerical #CBDBC8 {
       NumericalPropagator --|> AbstractIntegratedPropagator
       GLONASSNumericalPropagator  --|> AbstractIntegratedPropagator
     }

   }

@enduml
