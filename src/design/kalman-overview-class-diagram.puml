' Copyright 2002-2024 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12
  skinparam linetype              ortho

  package org.hipparchus #ECEBD8 {

    interface "NonLinearProcess<T extends Measurement>" as NonLinearProcess_T {
      +getEvolution(previousTime, previousState, measurement)
      +getInnovation(measurement, evolution, innovationCovarianceMatrix)
    }

    class "ExtendedKalmanFilter<T extends Measurement>" as ExtendedKalmanFilter_T

    ExtendedKalmanFilter_T --> "1" NonLinearProcess_T : estimate

  }

  package org.orekit #ECEBD8 {

    package estimation #DDEBD8 {

      package measurements #CBDBC8 {
        class EstimatedMeasurement
        interface ObservedMeasurement {
          +estimate(state)
        }
        EstimatedMeasurement <-left- ObservedMeasurement
      }

      package sequential #CBDBC8 {

        interface CovarianceMatrixProvider

        class KalmanEstimator {
          +getOrbitalParametersDrivers()
          +getPropagatorsParametersDrivers()
          +getMeasurementsParametersDrivers()
          +setObserver(observer)
          +estimationStep(measurement)
        }

        abstract AbstractKalmanModel {
          #updateReferenceTrajectories(propagators, pType, sType)
          #analyticalDerivativeComputations(mapper, state)
          +ProcessEstimate getEstimate()
          +EstimatedMeasurement<?> getCorrectedMeasurement()
          +SpacecraftState[] getCorrectedSpacecraftStates()
        }

        class KalmanModel
        class DSSTKalmanModel
        class TLEKalmanModel

        AbstractKalmanModel <-left-* KalmanEstimator
        KalmanEstimator *-right-> ExtendedKalmanFilter_T
        AbstractKalmanModel *--> CovarianceMatrixProvider
        EstimatedMeasurement <-- AbstractKalmanModel
        KalmanModel     --|> AbstractKalmanModel
        DSSTKalmanModel --|> AbstractKalmanModel
        TLEKalmanModel  --|> AbstractKalmanModel

      }

    }

  }

  package user.application #F3EDF7 {
    class MyProcessNoiseMatrixProvider #EAE6F7/B9B3D2
    CovarianceMatrixProvider <|-- MyProcessNoiseMatrixProvider
  }

@enduml
