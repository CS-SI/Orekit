' Copyright 2002-2017 CS Systèmes d'Information
' Licensed to CS Systèmes d'Information (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12

  package org.orekit #ECEBD8 {
    package bodies #DDEBD8 {

      class GeodeticPoint {
        +double getLatitude()
        +double getLongitude()
        +double getAltitude()
        +Vector3D getZenith()
        +Vector3D getNadir()
        +Vector3D getNorth()
        +Vector3D getSouth()
        +Vector3D getEast()
        +Vector3D getWest()
      }

      interface BodyShape {
        +getBodyFrame()
        +getIntersectionPoint(line, close, frame, date)
        +transform(point, frame, date)
        +transform(geodeticPoint)
        +projectToGround(point, date, frame)
      }

      class OneAxisEllipsoid

      class Ellipse {
        +getCenterOfCurvature()
        +pointAt()
        +projectToEllipse()
        +toPlane()
      }

      class Ellipsoid {
        +getPlaneSection( Vector3D planePoint, Vector3D planeNormal)
        +isInside(Vector3D point)
        +pointOnLimb(Vector3D observer, Vector3D outside)
      }

      BodyShape <|.. OneAxisEllipsoid
      OneAxisEllipsoid --|> Ellipsoid
      Ellipsoid --> Ellipse : creates
      BodyShape --> GeodeticPoint

    }
    package models.earth #DDEBD8 {
      interface EarthShape {
        +getEllipsoid
      }
      class ReferenceEllipsoid
      class Geoid
      EarthShape <|.. ReferenceEllipsoid
      OneAxisEllipsoid <|-- ReferenceEllipsoid
      BodyShape <|-- EarthShape
      EarthShape <|.. Geoid 
    }
    package forces.gravity.potential #DDEBD8 {
      interface NormalizedSphericalHarmonicsProvider
      Geoid --> NormalizedSphericalHarmonicsProvider
    }

  }

@enduml
